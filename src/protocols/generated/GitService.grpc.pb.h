// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GitService.proto
#ifndef GRPC_GitService_2eproto__INCLUDED
#define GRPC_GitService_2eproto__INCLUDED

#include "GitService.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nexus {

class GitService final {
 public:
  static constexpr char const* service_full_name() {
    return "nexus.GitService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListKnownRefs(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::nexus::ListRefsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>> AsyncListKnownRefs(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>>(AsyncListKnownRefsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>> PrepareAsyncListKnownRefs(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>>(PrepareAsyncListKnownRefsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListRefsForClone(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::nexus::ListRefsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>> AsyncListRefsForClone(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>>(AsyncListRefsForCloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>> PrepareAsyncListRefsForClone(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>>(PrepareAsyncListRefsForCloneRaw(context, request, cq));
    }
    virtual ::grpc::Status UploadPack(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::nexus::UploadPackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::UploadPackResponse>> AsyncUploadPack(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::UploadPackResponse>>(AsyncUploadPackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::UploadPackResponse>> PrepareAsyncUploadPack(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::UploadPackResponse>>(PrepareAsyncUploadPackRaw(context, request, cq));
    }
    virtual ::grpc::Status ReceivePack(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReceivePack(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReceivePackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReceivePack(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReceivePackRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>* AsyncListKnownRefsRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>* PrepareAsyncListKnownRefsRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>* AsyncListRefsForCloneRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::ListRefsResponse>* PrepareAsyncListRefsForCloneRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::UploadPackResponse>* AsyncUploadPackRaw(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::UploadPackResponse>* PrepareAsyncUploadPackRaw(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReceivePackRaw(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReceivePackRaw(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListKnownRefs(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::nexus::ListRefsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>> AsyncListKnownRefs(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>>(AsyncListKnownRefsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>> PrepareAsyncListKnownRefs(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>>(PrepareAsyncListKnownRefsRaw(context, request, cq));
    }
    ::grpc::Status ListRefsForClone(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::nexus::ListRefsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>> AsyncListRefsForClone(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>>(AsyncListRefsForCloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>> PrepareAsyncListRefsForClone(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>>(PrepareAsyncListRefsForCloneRaw(context, request, cq));
    }
    ::grpc::Status UploadPack(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::nexus::UploadPackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::UploadPackResponse>> AsyncUploadPack(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::UploadPackResponse>>(AsyncUploadPackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::UploadPackResponse>> PrepareAsyncUploadPack(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::UploadPackResponse>>(PrepareAsyncUploadPackRaw(context, request, cq));
    }
    ::grpc::Status ReceivePack(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReceivePack(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReceivePackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReceivePack(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReceivePackRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>* AsyncListKnownRefsRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>* PrepareAsyncListKnownRefsRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>* AsyncListRefsForCloneRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::ListRefsResponse>* PrepareAsyncListRefsForCloneRaw(::grpc::ClientContext* context, const ::nexus::ListRefsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::UploadPackResponse>* AsyncUploadPackRaw(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::UploadPackResponse>* PrepareAsyncUploadPackRaw(::grpc::ClientContext* context, const ::nexus::UploadPackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReceivePackRaw(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReceivePackRaw(::grpc::ClientContext* context, const ::nexus::ReceivePackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListKnownRefs_;
    const ::grpc::internal::RpcMethod rpcmethod_ListRefsForClone_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadPack_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceivePack_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListKnownRefs(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response);
    virtual ::grpc::Status ListRefsForClone(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response);
    virtual ::grpc::Status UploadPack(::grpc::ServerContext* context, const ::nexus::UploadPackRequest* request, ::nexus::UploadPackResponse* response);
    virtual ::grpc::Status ReceivePack(::grpc::ServerContext* context, const ::nexus::ReceivePackRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListKnownRefs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListKnownRefs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListKnownRefs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKnownRefs(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListKnownRefs(::grpc::ServerContext* context, ::nexus::ListRefsRequest* request, ::grpc::ServerAsyncResponseWriter< ::nexus::ListRefsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRefsForClone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListRefsForClone() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListRefsForClone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRefsForClone(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRefsForClone(::grpc::ServerContext* context, ::nexus::ListRefsRequest* request, ::grpc::ServerAsyncResponseWriter< ::nexus::ListRefsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadPack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UploadPack() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UploadPack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadPack(::grpc::ServerContext* context, const ::nexus::UploadPackRequest* request, ::nexus::UploadPackResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadPack(::grpc::ServerContext* context, ::nexus::UploadPackRequest* request, ::grpc::ServerAsyncResponseWriter< ::nexus::UploadPackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceivePack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReceivePack() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReceivePack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceivePack(::grpc::ServerContext* context, const ::nexus::ReceivePackRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceivePack(::grpc::ServerContext* context, ::nexus::ReceivePackRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListKnownRefs<WithAsyncMethod_ListRefsForClone<WithAsyncMethod_UploadPack<WithAsyncMethod_ReceivePack<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListKnownRefs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListKnownRefs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListKnownRefs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKnownRefs(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRefsForClone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListRefsForClone() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListRefsForClone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRefsForClone(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadPack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UploadPack() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UploadPack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadPack(::grpc::ServerContext* context, const ::nexus::UploadPackRequest* request, ::nexus::UploadPackResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceivePack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReceivePack() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReceivePack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceivePack(::grpc::ServerContext* context, const ::nexus::ReceivePackRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListKnownRefs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListKnownRefs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nexus::ListRefsRequest, ::nexus::ListRefsResponse>(std::bind(&WithStreamedUnaryMethod_ListKnownRefs<BaseClass>::StreamedListKnownRefs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListKnownRefs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListKnownRefs(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListKnownRefs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::ListRefsRequest,::nexus::ListRefsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListRefsForClone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListRefsForClone() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::nexus::ListRefsRequest, ::nexus::ListRefsResponse>(std::bind(&WithStreamedUnaryMethod_ListRefsForClone<BaseClass>::StreamedListRefsForClone, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListRefsForClone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRefsForClone(::grpc::ServerContext* context, const ::nexus::ListRefsRequest* request, ::nexus::ListRefsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListRefsForClone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::ListRefsRequest,::nexus::ListRefsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadPack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UploadPack() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::nexus::UploadPackRequest, ::nexus::UploadPackResponse>(std::bind(&WithStreamedUnaryMethod_UploadPack<BaseClass>::StreamedUploadPack, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UploadPack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadPack(::grpc::ServerContext* context, const ::nexus::UploadPackRequest* request, ::nexus::UploadPackResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadPack(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::UploadPackRequest,::nexus::UploadPackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceivePack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReceivePack() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::nexus::ReceivePackRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ReceivePack<BaseClass>::StreamedReceivePack, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReceivePack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceivePack(::grpc::ServerContext* context, const ::nexus::ReceivePackRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceivePack(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::ReceivePackRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListKnownRefs<WithStreamedUnaryMethod_ListRefsForClone<WithStreamedUnaryMethod_UploadPack<WithStreamedUnaryMethod_ReceivePack<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListKnownRefs<WithStreamedUnaryMethod_ListRefsForClone<WithStreamedUnaryMethod_UploadPack<WithStreamedUnaryMethod_ReceivePack<Service > > > > StreamedService;
};

}  // namespace nexus


#endif  // GRPC_GitService_2eproto__INCLUDED
