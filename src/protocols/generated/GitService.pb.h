// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GitService.proto

#ifndef PROTOBUF_GitService_2eproto__INCLUDED
#define PROTOBUF_GitService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_GitService_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUploadPackRequestImpl();
void InitDefaultsUploadPackRequest();
void InitDefaultsUploadPackResponseImpl();
void InitDefaultsUploadPackResponse();
void InitDefaultsReceivePackRequestImpl();
void InitDefaultsReceivePackRequest();
void InitDefaultsListRefsRequestImpl();
void InitDefaultsListRefsRequest();
void InitDefaultsListRefsResponseImpl();
void InitDefaultsListRefsResponse();
inline void InitDefaults() {
  InitDefaultsUploadPackRequest();
  InitDefaultsUploadPackResponse();
  InitDefaultsReceivePackRequest();
  InitDefaultsListRefsRequest();
  InitDefaultsListRefsResponse();
}
}  // namespace protobuf_GitService_2eproto
namespace nexus {
class ListRefsRequest;
class ListRefsRequestDefaultTypeInternal;
extern ListRefsRequestDefaultTypeInternal _ListRefsRequest_default_instance_;
class ListRefsResponse;
class ListRefsResponseDefaultTypeInternal;
extern ListRefsResponseDefaultTypeInternal _ListRefsResponse_default_instance_;
class ReceivePackRequest;
class ReceivePackRequestDefaultTypeInternal;
extern ReceivePackRequestDefaultTypeInternal _ReceivePackRequest_default_instance_;
class UploadPackRequest;
class UploadPackRequestDefaultTypeInternal;
extern UploadPackRequestDefaultTypeInternal _UploadPackRequest_default_instance_;
class UploadPackResponse;
class UploadPackResponseDefaultTypeInternal;
extern UploadPackResponseDefaultTypeInternal _UploadPackResponse_default_instance_;
}  // namespace nexus
namespace nexus {

// ===================================================================

class UploadPackRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.UploadPackRequest) */ {
 public:
  UploadPackRequest();
  virtual ~UploadPackRequest();

  UploadPackRequest(const UploadPackRequest& from);

  inline UploadPackRequest& operator=(const UploadPackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadPackRequest(UploadPackRequest&& from) noexcept
    : UploadPackRequest() {
    *this = ::std::move(from);
  }

  inline UploadPackRequest& operator=(UploadPackRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadPackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadPackRequest* internal_default_instance() {
    return reinterpret_cast<const UploadPackRequest*>(
               &_UploadPackRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UploadPackRequest* other);
  friend void swap(UploadPackRequest& a, UploadPackRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadPackRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadPackRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadPackRequest& from);
  void MergeFrom(const UploadPackRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadPackRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repoName = 1;
  void clear_reponame();
  static const int kRepoNameFieldNumber = 1;
  const ::std::string& reponame() const;
  void set_reponame(const ::std::string& value);
  #if LANG_CXX11
  void set_reponame(::std::string&& value);
  #endif
  void set_reponame(const char* value);
  void set_reponame(const char* value, size_t size);
  ::std::string* mutable_reponame();
  ::std::string* release_reponame();
  void set_allocated_reponame(::std::string* reponame);

  // @@protoc_insertion_point(class_scope:nexus.UploadPackRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reponame_;
  mutable int _cached_size_;
  friend struct ::protobuf_GitService_2eproto::TableStruct;
  friend void ::protobuf_GitService_2eproto::InitDefaultsUploadPackRequestImpl();
};
// -------------------------------------------------------------------

class UploadPackResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.UploadPackResponse) */ {
 public:
  UploadPackResponse();
  virtual ~UploadPackResponse();

  UploadPackResponse(const UploadPackResponse& from);

  inline UploadPackResponse& operator=(const UploadPackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadPackResponse(UploadPackResponse&& from) noexcept
    : UploadPackResponse() {
    *this = ::std::move(from);
  }

  inline UploadPackResponse& operator=(UploadPackResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadPackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadPackResponse* internal_default_instance() {
    return reinterpret_cast<const UploadPackResponse*>(
               &_UploadPackResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UploadPackResponse* other);
  friend void swap(UploadPackResponse& a, UploadPackResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadPackResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadPackResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadPackResponse& from);
  void MergeFrom(const UploadPackResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadPackResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nexus.UploadPackResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_GitService_2eproto::TableStruct;
  friend void ::protobuf_GitService_2eproto::InitDefaultsUploadPackResponseImpl();
};
// -------------------------------------------------------------------

class ReceivePackRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.ReceivePackRequest) */ {
 public:
  ReceivePackRequest();
  virtual ~ReceivePackRequest();

  ReceivePackRequest(const ReceivePackRequest& from);

  inline ReceivePackRequest& operator=(const ReceivePackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceivePackRequest(ReceivePackRequest&& from) noexcept
    : ReceivePackRequest() {
    *this = ::std::move(from);
  }

  inline ReceivePackRequest& operator=(ReceivePackRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceivePackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivePackRequest* internal_default_instance() {
    return reinterpret_cast<const ReceivePackRequest*>(
               &_ReceivePackRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ReceivePackRequest* other);
  friend void swap(ReceivePackRequest& a, ReceivePackRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceivePackRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReceivePackRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReceivePackRequest& from);
  void MergeFrom(const ReceivePackRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReceivePackRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repoName = 1;
  void clear_reponame();
  static const int kRepoNameFieldNumber = 1;
  const ::std::string& reponame() const;
  void set_reponame(const ::std::string& value);
  #if LANG_CXX11
  void set_reponame(::std::string&& value);
  #endif
  void set_reponame(const char* value);
  void set_reponame(const char* value, size_t size);
  ::std::string* mutable_reponame();
  ::std::string* release_reponame();
  void set_allocated_reponame(::std::string* reponame);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nexus.ReceivePackRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reponame_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_GitService_2eproto::TableStruct;
  friend void ::protobuf_GitService_2eproto::InitDefaultsReceivePackRequestImpl();
};
// -------------------------------------------------------------------

class ListRefsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.ListRefsRequest) */ {
 public:
  ListRefsRequest();
  virtual ~ListRefsRequest();

  ListRefsRequest(const ListRefsRequest& from);

  inline ListRefsRequest& operator=(const ListRefsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRefsRequest(ListRefsRequest&& from) noexcept
    : ListRefsRequest() {
    *this = ::std::move(from);
  }

  inline ListRefsRequest& operator=(ListRefsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRefsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRefsRequest* internal_default_instance() {
    return reinterpret_cast<const ListRefsRequest*>(
               &_ListRefsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ListRefsRequest* other);
  friend void swap(ListRefsRequest& a, ListRefsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRefsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRefsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRefsRequest& from);
  void MergeFrom(const ListRefsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRefsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repoName = 1;
  void clear_reponame();
  static const int kRepoNameFieldNumber = 1;
  const ::std::string& reponame() const;
  void set_reponame(const ::std::string& value);
  #if LANG_CXX11
  void set_reponame(::std::string&& value);
  #endif
  void set_reponame(const char* value);
  void set_reponame(const char* value, size_t size);
  ::std::string* mutable_reponame();
  ::std::string* release_reponame();
  void set_allocated_reponame(::std::string* reponame);

  // @@protoc_insertion_point(class_scope:nexus.ListRefsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reponame_;
  mutable int _cached_size_;
  friend struct ::protobuf_GitService_2eproto::TableStruct;
  friend void ::protobuf_GitService_2eproto::InitDefaultsListRefsRequestImpl();
};
// -------------------------------------------------------------------

class ListRefsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.ListRefsResponse) */ {
 public:
  ListRefsResponse();
  virtual ~ListRefsResponse();

  ListRefsResponse(const ListRefsResponse& from);

  inline ListRefsResponse& operator=(const ListRefsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRefsResponse(ListRefsResponse&& from) noexcept
    : ListRefsResponse() {
    *this = ::std::move(from);
  }

  inline ListRefsResponse& operator=(ListRefsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRefsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRefsResponse* internal_default_instance() {
    return reinterpret_cast<const ListRefsResponse*>(
               &_ListRefsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ListRefsResponse* other);
  friend void swap(ListRefsResponse& a, ListRefsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRefsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRefsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRefsResponse& from);
  void MergeFrom(const ListRefsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRefsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nexus.ListRefsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_GitService_2eproto::TableStruct;
  friend void ::protobuf_GitService_2eproto::InitDefaultsListRefsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadPackRequest

// string repoName = 1;
inline void UploadPackRequest::clear_reponame() {
  reponame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadPackRequest::reponame() const {
  // @@protoc_insertion_point(field_get:nexus.UploadPackRequest.repoName)
  return reponame_.GetNoArena();
}
inline void UploadPackRequest::set_reponame(const ::std::string& value) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.UploadPackRequest.repoName)
}
#if LANG_CXX11
inline void UploadPackRequest::set_reponame(::std::string&& value) {
  
  reponame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.UploadPackRequest.repoName)
}
#endif
inline void UploadPackRequest::set_reponame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.UploadPackRequest.repoName)
}
inline void UploadPackRequest::set_reponame(const char* value, size_t size) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.UploadPackRequest.repoName)
}
inline ::std::string* UploadPackRequest::mutable_reponame() {
  
  // @@protoc_insertion_point(field_mutable:nexus.UploadPackRequest.repoName)
  return reponame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadPackRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:nexus.UploadPackRequest.repoName)
  
  return reponame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadPackRequest::set_allocated_reponame(::std::string* reponame) {
  if (reponame != NULL) {
    
  } else {
    
  }
  reponame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reponame);
  // @@protoc_insertion_point(field_set_allocated:nexus.UploadPackRequest.repoName)
}

// -------------------------------------------------------------------

// UploadPackResponse

// bytes data = 1;
inline void UploadPackResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadPackResponse::data() const {
  // @@protoc_insertion_point(field_get:nexus.UploadPackResponse.data)
  return data_.GetNoArena();
}
inline void UploadPackResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.UploadPackResponse.data)
}
#if LANG_CXX11
inline void UploadPackResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.UploadPackResponse.data)
}
#endif
inline void UploadPackResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.UploadPackResponse.data)
}
inline void UploadPackResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.UploadPackResponse.data)
}
inline ::std::string* UploadPackResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:nexus.UploadPackResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadPackResponse::release_data() {
  // @@protoc_insertion_point(field_release:nexus.UploadPackResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadPackResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:nexus.UploadPackResponse.data)
}

// -------------------------------------------------------------------

// ReceivePackRequest

// string repoName = 1;
inline void ReceivePackRequest::clear_reponame() {
  reponame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceivePackRequest::reponame() const {
  // @@protoc_insertion_point(field_get:nexus.ReceivePackRequest.repoName)
  return reponame_.GetNoArena();
}
inline void ReceivePackRequest::set_reponame(const ::std::string& value) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.ReceivePackRequest.repoName)
}
#if LANG_CXX11
inline void ReceivePackRequest::set_reponame(::std::string&& value) {
  
  reponame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.ReceivePackRequest.repoName)
}
#endif
inline void ReceivePackRequest::set_reponame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.ReceivePackRequest.repoName)
}
inline void ReceivePackRequest::set_reponame(const char* value, size_t size) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.ReceivePackRequest.repoName)
}
inline ::std::string* ReceivePackRequest::mutable_reponame() {
  
  // @@protoc_insertion_point(field_mutable:nexus.ReceivePackRequest.repoName)
  return reponame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceivePackRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:nexus.ReceivePackRequest.repoName)
  
  return reponame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivePackRequest::set_allocated_reponame(::std::string* reponame) {
  if (reponame != NULL) {
    
  } else {
    
  }
  reponame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reponame);
  // @@protoc_insertion_point(field_set_allocated:nexus.ReceivePackRequest.repoName)
}

// bytes data = 2;
inline void ReceivePackRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceivePackRequest::data() const {
  // @@protoc_insertion_point(field_get:nexus.ReceivePackRequest.data)
  return data_.GetNoArena();
}
inline void ReceivePackRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.ReceivePackRequest.data)
}
#if LANG_CXX11
inline void ReceivePackRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.ReceivePackRequest.data)
}
#endif
inline void ReceivePackRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.ReceivePackRequest.data)
}
inline void ReceivePackRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.ReceivePackRequest.data)
}
inline ::std::string* ReceivePackRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:nexus.ReceivePackRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceivePackRequest::release_data() {
  // @@protoc_insertion_point(field_release:nexus.ReceivePackRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivePackRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:nexus.ReceivePackRequest.data)
}

// -------------------------------------------------------------------

// ListRefsRequest

// string repoName = 1;
inline void ListRefsRequest::clear_reponame() {
  reponame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListRefsRequest::reponame() const {
  // @@protoc_insertion_point(field_get:nexus.ListRefsRequest.repoName)
  return reponame_.GetNoArena();
}
inline void ListRefsRequest::set_reponame(const ::std::string& value) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.ListRefsRequest.repoName)
}
#if LANG_CXX11
inline void ListRefsRequest::set_reponame(::std::string&& value) {
  
  reponame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.ListRefsRequest.repoName)
}
#endif
inline void ListRefsRequest::set_reponame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.ListRefsRequest.repoName)
}
inline void ListRefsRequest::set_reponame(const char* value, size_t size) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.ListRefsRequest.repoName)
}
inline ::std::string* ListRefsRequest::mutable_reponame() {
  
  // @@protoc_insertion_point(field_mutable:nexus.ListRefsRequest.repoName)
  return reponame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRefsRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:nexus.ListRefsRequest.repoName)
  
  return reponame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRefsRequest::set_allocated_reponame(::std::string* reponame) {
  if (reponame != NULL) {
    
  } else {
    
  }
  reponame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reponame);
  // @@protoc_insertion_point(field_set_allocated:nexus.ListRefsRequest.repoName)
}

// -------------------------------------------------------------------

// ListRefsResponse

// bytes data = 1;
inline void ListRefsResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListRefsResponse::data() const {
  // @@protoc_insertion_point(field_get:nexus.ListRefsResponse.data)
  return data_.GetNoArena();
}
inline void ListRefsResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.ListRefsResponse.data)
}
#if LANG_CXX11
inline void ListRefsResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.ListRefsResponse.data)
}
#endif
inline void ListRefsResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.ListRefsResponse.data)
}
inline void ListRefsResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.ListRefsResponse.data)
}
inline ::std::string* ListRefsResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:nexus.ListRefsResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRefsResponse::release_data() {
  // @@protoc_insertion_point(field_release:nexus.ListRefsResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRefsResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:nexus.ListRefsResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nexus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GitService_2eproto__INCLUDED
