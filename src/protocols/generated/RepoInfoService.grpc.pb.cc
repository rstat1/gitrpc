// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RepoInfoService.proto

#include "RepoInfoService.pb.h"
#include "RepoInfoService.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nexus {

static const char* RepoInfoService_method_names[] = {
  "/nexus.RepoInfoService/GetCommit",
  "/nexus.RepoInfoService/GetCommits",
  "/nexus.RepoInfoService/GetKnownRepos",
};

std::unique_ptr< RepoInfoService::Stub> RepoInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RepoInfoService::Stub> stub(new RepoInfoService::Stub(channel));
  return stub;
}

RepoInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCommit_(RepoInfoService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCommits_(RepoInfoService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKnownRepos_(RepoInfoService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RepoInfoService::Stub::GetCommit(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::nexus::GetCommitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCommit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>* RepoInfoService::Stub::AsyncGetCommitRaw(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nexus::GetCommitResponse>::Create(channel_.get(), cq, rpcmethod_GetCommit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>* RepoInfoService::Stub::PrepareAsyncGetCommitRaw(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nexus::GetCommitResponse>::Create(channel_.get(), cq, rpcmethod_GetCommit_, context, request, false);
}

::grpc::Status RepoInfoService::Stub::GetCommits(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::nexus::GetCommitsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCommits_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>* RepoInfoService::Stub::AsyncGetCommitsRaw(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nexus::GetCommitsResponse>::Create(channel_.get(), cq, rpcmethod_GetCommits_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>* RepoInfoService::Stub::PrepareAsyncGetCommitsRaw(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nexus::GetCommitsResponse>::Create(channel_.get(), cq, rpcmethod_GetCommits_, context, request, false);
}

::grpc::Status RepoInfoService::Stub::GetKnownRepos(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKnownRepos_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RepoInfoService::Stub::AsyncGetKnownReposRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_GetKnownRepos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RepoInfoService::Stub::PrepareAsyncGetKnownReposRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_GetKnownRepos_, context, request, false);
}

RepoInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RepoInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RepoInfoService::Service, ::nexus::GetCommitRequest, ::nexus::GetCommitResponse>(
          std::mem_fn(&RepoInfoService::Service::GetCommit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RepoInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RepoInfoService::Service, ::nexus::GetCommitsRequest, ::nexus::GetCommitsResponse>(
          std::mem_fn(&RepoInfoService::Service::GetCommits), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RepoInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RepoInfoService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&RepoInfoService::Service::GetKnownRepos), this)));
}

RepoInfoService::Service::~Service() {
}

::grpc::Status RepoInfoService::Service::GetCommit(::grpc::ServerContext* context, const ::nexus::GetCommitRequest* request, ::nexus::GetCommitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RepoInfoService::Service::GetCommits(::grpc::ServerContext* context, const ::nexus::GetCommitsRequest* request, ::nexus::GetCommitsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RepoInfoService::Service::GetKnownRepos(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nexus

