// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RepoInfoService.proto
#ifndef GRPC_RepoInfoService_2eproto__INCLUDED
#define GRPC_RepoInfoService_2eproto__INCLUDED

#include "RepoInfoService.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nexus {

class RepoInfoService final {
 public:
  static constexpr char const* service_full_name() {
    return "nexus.RepoInfoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCommit(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::nexus::GetCommitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitResponse>> AsyncGetCommit(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitResponse>>(AsyncGetCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitResponse>> PrepareAsyncGetCommit(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitResponse>>(PrepareAsyncGetCommitRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCommits(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::nexus::GetCommitsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitsResponse>> AsyncGetCommits(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitsResponse>>(AsyncGetCommitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitsResponse>> PrepareAsyncGetCommits(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitsResponse>>(PrepareAsyncGetCommitsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetKnownRepos(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncGetKnownRepos(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncGetKnownReposRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncGetKnownRepos(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncGetKnownReposRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitResponse>* AsyncGetCommitRaw(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitResponse>* PrepareAsyncGetCommitRaw(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitsResponse>* AsyncGetCommitsRaw(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::GetCommitsResponse>* PrepareAsyncGetCommitsRaw(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncGetKnownReposRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncGetKnownReposRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetCommit(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::nexus::GetCommitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>> AsyncGetCommit(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>>(AsyncGetCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>> PrepareAsyncGetCommit(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>>(PrepareAsyncGetCommitRaw(context, request, cq));
    }
    ::grpc::Status GetCommits(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::nexus::GetCommitsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>> AsyncGetCommits(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>>(AsyncGetCommitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>> PrepareAsyncGetCommits(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>>(PrepareAsyncGetCommitsRaw(context, request, cq));
    }
    ::grpc::Status GetKnownRepos(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncGetKnownRepos(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncGetKnownReposRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncGetKnownRepos(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncGetKnownReposRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>* AsyncGetCommitRaw(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitResponse>* PrepareAsyncGetCommitRaw(::grpc::ClientContext* context, const ::nexus::GetCommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>* AsyncGetCommitsRaw(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::GetCommitsResponse>* PrepareAsyncGetCommitsRaw(::grpc::ClientContext* context, const ::nexus::GetCommitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncGetKnownReposRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncGetKnownReposRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCommit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCommits_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKnownRepos_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCommit(::grpc::ServerContext* context, const ::nexus::GetCommitRequest* request, ::nexus::GetCommitResponse* response);
    virtual ::grpc::Status GetCommits(::grpc::ServerContext* context, const ::nexus::GetCommitsRequest* request, ::nexus::GetCommitsResponse* response);
    virtual ::grpc::Status GetKnownRepos(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCommit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommit(::grpc::ServerContext* context, const ::nexus::GetCommitRequest* request, ::nexus::GetCommitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommit(::grpc::ServerContext* context, ::nexus::GetCommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::nexus::GetCommitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCommits() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommits(::grpc::ServerContext* context, const ::nexus::GetCommitsRequest* request, ::nexus::GetCommitsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCommits(::grpc::ServerContext* context, ::nexus::GetCommitsRequest* request, ::grpc::ServerAsyncResponseWriter< ::nexus::GetCommitsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKnownRepos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetKnownRepos() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetKnownRepos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKnownRepos(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKnownRepos(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCommit<WithAsyncMethod_GetCommits<WithAsyncMethod_GetKnownRepos<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCommit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommit(::grpc::ServerContext* context, const ::nexus::GetCommitRequest* request, ::nexus::GetCommitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCommits() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCommits(::grpc::ServerContext* context, const ::nexus::GetCommitsRequest* request, ::nexus::GetCommitsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKnownRepos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetKnownRepos() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetKnownRepos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKnownRepos(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCommit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nexus::GetCommitRequest, ::nexus::GetCommitResponse>(std::bind(&WithStreamedUnaryMethod_GetCommit<BaseClass>::StreamedGetCommit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCommit(::grpc::ServerContext* context, const ::nexus::GetCommitRequest* request, ::nexus::GetCommitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::GetCommitRequest,::nexus::GetCommitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCommits() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::nexus::GetCommitsRequest, ::nexus::GetCommitsResponse>(std::bind(&WithStreamedUnaryMethod_GetCommits<BaseClass>::StreamedGetCommits, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCommits(::grpc::ServerContext* context, const ::nexus::GetCommitsRequest* request, ::nexus::GetCommitsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCommits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::GetCommitsRequest,::nexus::GetCommitsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKnownRepos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetKnownRepos() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_GetKnownRepos<BaseClass>::StreamedGetKnownRepos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetKnownRepos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKnownRepos(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKnownRepos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCommit<WithStreamedUnaryMethod_GetCommits<WithStreamedUnaryMethod_GetKnownRepos<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCommit<WithStreamedUnaryMethod_GetCommits<WithStreamedUnaryMethod_GetKnownRepos<Service > > > StreamedService;
};

}  // namespace nexus


#endif  // GRPC_RepoInfoService_2eproto__INCLUDED
