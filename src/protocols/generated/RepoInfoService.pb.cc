// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RepoInfoService.proto

#include "RepoInfoService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace nexus {
class CommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Commit>
      _instance;
} _Commit_default_instance_;
class GetCommitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCommitRequest>
      _instance;
} _GetCommitRequest_default_instance_;
class GetCommitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCommitResponse>
      _instance;
} _GetCommitResponse_default_instance_;
class GetCommitsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCommitsRequest>
      _instance;
} _GetCommitsRequest_default_instance_;
class GetCommitsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCommitsResponse>
      _instance;
} _GetCommitsResponse_default_instance_;
}  // namespace nexus
namespace protobuf_RepoInfoService_2eproto {
void InitDefaultsCommitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::nexus::_Commit_default_instance_;
    new (ptr) ::nexus::Commit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nexus::Commit::InitAsDefaultInstance();
}

void InitDefaultsCommit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommitImpl);
}

void InitDefaultsGetCommitRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nexus::_GetCommitRequest_default_instance_;
    new (ptr) ::nexus::GetCommitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nexus::GetCommitRequest::InitAsDefaultInstance();
}

void InitDefaultsGetCommitRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetCommitRequestImpl);
}

void InitDefaultsGetCommitResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_RepoInfoService_2eproto::InitDefaultsCommit();
  {
    void* ptr = &::nexus::_GetCommitResponse_default_instance_;
    new (ptr) ::nexus::GetCommitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nexus::GetCommitResponse::InitAsDefaultInstance();
}

void InitDefaultsGetCommitResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetCommitResponseImpl);
}

void InitDefaultsGetCommitsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nexus::_GetCommitsRequest_default_instance_;
    new (ptr) ::nexus::GetCommitsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nexus::GetCommitsRequest::InitAsDefaultInstance();
}

void InitDefaultsGetCommitsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetCommitsRequestImpl);
}

void InitDefaultsGetCommitsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_RepoInfoService_2eproto::InitDefaultsCommit();
  {
    void* ptr = &::nexus::_GetCommitsResponse_default_instance_;
    new (ptr) ::nexus::GetCommitsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nexus::GetCommitsResponse::InitAsDefaultInstance();
}

void InitDefaultsGetCommitsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetCommitsResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::Commit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::Commit, author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::Commit, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::Commit, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::Commit, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::Commit, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitRequest, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitResponse, commit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitsRequest, reponame_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nexus::GetCommitsResponse, commits_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nexus::Commit)},
  { 10, -1, sizeof(::nexus::GetCommitRequest)},
  { 16, -1, sizeof(::nexus::GetCommitResponse)},
  { 22, -1, sizeof(::nexus::GetCommitsRequest)},
  { 28, -1, sizeof(::nexus::GetCommitsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nexus::_Commit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nexus::_GetCommitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nexus::_GetCommitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nexus::_GetCommitsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nexus::_GetCommitsResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "RepoInfoService.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025RepoInfoService.proto\022\005nexus\032\033google/p"
      "rotobuf/empty.proto\032\037google/protobuf/tim"
      "estamp.proto\"o\n\006Commit\022\016\n\006author\030\001 \001(\t\022\017"
      "\n\007message\030\002 \001(\t\022\014\n\004hash\030\003 \001(\t\022\014\n\004body\030\004 "
      "\001(\014\022(\n\004date\030\005 \001(\0132\032.google.protobuf.Time"
      "stamp\" \n\020GetCommitRequest\022\014\n\004hash\030\001 \001(\t\""
      "2\n\021GetCommitResponse\022\035\n\006commit\030\001 \001(\0132\r.n"
      "exus.Commit\"%\n\021GetCommitsRequest\022\020\n\010repo"
      "Name\030\001 \001(\t\"4\n\022GetCommitsResponse\022\036\n\007comm"
      "its\030\001 \003(\0132\r.nexus.Commit2\333\001\n\017RepoInfoSer"
      "vice\022@\n\tGetCommit\022\027.nexus.GetCommitReque"
      "st\032\030.nexus.GetCommitResponse\"\000\022C\n\nGetCom"
      "mits\022\030.nexus.GetCommitsRequest\032\031.nexus.G"
      "etCommitsResponse\"\000\022A\n\rGetKnownRepos\022\026.g"
      "oogle.protobuf.Empty\032\026.google.protobuf.E"
      "mpty\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RepoInfoService.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_RepoInfoService_2eproto
namespace nexus {

// ===================================================================

void Commit::InitAsDefaultInstance() {
  ::nexus::_Commit_default_instance_._instance.get_mutable()->date_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Commit::clear_date() {
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Commit::kAuthorFieldNumber;
const int Commit::kMessageFieldNumber;
const int Commit::kHashFieldNumber;
const int Commit::kBodyFieldNumber;
const int Commit::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Commit::Commit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RepoInfoService_2eproto::InitDefaultsCommit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nexus.Commit)
}
Commit::Commit(const Commit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.author().size() > 0) {
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_date()) {
    date_ = new ::google::protobuf::Timestamp(*from.date_);
  } else {
    date_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nexus.Commit)
}

void Commit::SharedCtor() {
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = NULL;
  _cached_size_ = 0;
}

Commit::~Commit() {
  // @@protoc_insertion_point(destructor:nexus.Commit)
  SharedDtor();
}

void Commit::SharedDtor() {
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_;
}

void Commit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commit::descriptor() {
  ::protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Commit& Commit::default_instance() {
  ::protobuf_RepoInfoService_2eproto::InitDefaultsCommit();
  return *internal_default_instance();
}

Commit* Commit::New(::google::protobuf::Arena* arena) const {
  Commit* n = new Commit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.Commit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
  _internal_metadata_.Clear();
}

bool Commit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nexus.Commit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string author = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->author().data(), static_cast<int>(this->author().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nexus.Commit.author"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nexus.Commit.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nexus.Commit.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nexus.Commit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nexus.Commit)
  return false;
#undef DO_
}

void Commit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nexus.Commit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string author = 1;
  if (this->author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.Commit.author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->author(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.Commit.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // string hash = 3;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.Commit.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hash(), output);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  // .google.protobuf.Timestamp date = 5;
  if (this->has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->date_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nexus.Commit)
}

::google::protobuf::uint8* Commit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nexus.Commit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string author = 1;
  if (this->author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.Commit.author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->author(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.Commit.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // string hash = 3;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.Commit.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hash(), target);
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  // .google.protobuf.Timestamp date = 5;
  if (this->has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->date_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nexus.Commit)
  return target;
}

size_t Commit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nexus.Commit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string author = 1;
  if (this->author().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // string hash = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // bytes body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // .google.protobuf.Timestamp date = 5;
  if (this->has_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->date_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nexus.Commit)
  GOOGLE_DCHECK_NE(&from, this);
  const Commit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Commit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nexus.Commit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nexus.Commit)
    MergeFrom(*source);
  }
}

void Commit::MergeFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nexus.Commit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.author().size() > 0) {

    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_date()) {
    mutable_date()->::google::protobuf::Timestamp::MergeFrom(from.date());
  }
}

void Commit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nexus.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit::IsInitialized() const {
  return true;
}

void Commit::Swap(Commit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Commit::InternalSwap(Commit* other) {
  using std::swap;
  author_.Swap(&other->author_);
  message_.Swap(&other->message_);
  hash_.Swap(&other->hash_);
  body_.Swap(&other->body_);
  swap(date_, other->date_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Commit::GetMetadata() const {
  protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetCommitRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCommitRequest::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCommitRequest::GetCommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nexus.GetCommitRequest)
}
GetCommitRequest::GetCommitRequest(const GetCommitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:nexus.GetCommitRequest)
}

void GetCommitRequest::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetCommitRequest::~GetCommitRequest() {
  // @@protoc_insertion_point(destructor:nexus.GetCommitRequest)
  SharedDtor();
}

void GetCommitRequest::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetCommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCommitRequest::descriptor() {
  ::protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCommitRequest& GetCommitRequest::default_instance() {
  ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitRequest();
  return *internal_default_instance();
}

GetCommitRequest* GetCommitRequest::New(::google::protobuf::Arena* arena) const {
  GetCommitRequest* n = new GetCommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.GetCommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetCommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nexus.GetCommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nexus.GetCommitRequest.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nexus.GetCommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nexus.GetCommitRequest)
  return false;
#undef DO_
}

void GetCommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nexus.GetCommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.GetCommitRequest.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nexus.GetCommitRequest)
}

::google::protobuf::uint8* GetCommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nexus.GetCommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.GetCommitRequest.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nexus.GetCommitRequest)
  return target;
}

size_t GetCommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nexus.GetCommitRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nexus.GetCommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCommitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nexus.GetCommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nexus.GetCommitRequest)
    MergeFrom(*source);
  }
}

void GetCommitRequest::MergeFrom(const GetCommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nexus.GetCommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void GetCommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nexus.GetCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCommitRequest::CopyFrom(const GetCommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.GetCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommitRequest::IsInitialized() const {
  return true;
}

void GetCommitRequest::Swap(GetCommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCommitRequest::InternalSwap(GetCommitRequest* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCommitRequest::GetMetadata() const {
  protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetCommitResponse::InitAsDefaultInstance() {
  ::nexus::_GetCommitResponse_default_instance_._instance.get_mutable()->commit_ = const_cast< ::nexus::Commit*>(
      ::nexus::Commit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCommitResponse::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCommitResponse::GetCommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nexus.GetCommitResponse)
}
GetCommitResponse::GetCommitResponse(const GetCommitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_commit()) {
    commit_ = new ::nexus::Commit(*from.commit_);
  } else {
    commit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nexus.GetCommitResponse)
}

void GetCommitResponse::SharedCtor() {
  commit_ = NULL;
  _cached_size_ = 0;
}

GetCommitResponse::~GetCommitResponse() {
  // @@protoc_insertion_point(destructor:nexus.GetCommitResponse)
  SharedDtor();
}

void GetCommitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete commit_;
}

void GetCommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCommitResponse::descriptor() {
  ::protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCommitResponse& GetCommitResponse::default_instance() {
  ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitResponse();
  return *internal_default_instance();
}

GetCommitResponse* GetCommitResponse::New(::google::protobuf::Arena* arena) const {
  GetCommitResponse* n = new GetCommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.GetCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && commit_ != NULL) {
    delete commit_;
  }
  commit_ = NULL;
  _internal_metadata_.Clear();
}

bool GetCommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nexus.GetCommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nexus.Commit commit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nexus.GetCommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nexus.GetCommitResponse)
  return false;
#undef DO_
}

void GetCommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nexus.GetCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nexus.Commit commit = 1;
  if (this->has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->commit_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nexus.GetCommitResponse)
}

::google::protobuf::uint8* GetCommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nexus.GetCommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nexus.Commit commit = 1;
  if (this->has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->commit_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nexus.GetCommitResponse)
  return target;
}

size_t GetCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nexus.GetCommitResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nexus.Commit commit = 1;
  if (this->has_commit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->commit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nexus.GetCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nexus.GetCommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nexus.GetCommitResponse)
    MergeFrom(*source);
  }
}

void GetCommitResponse::MergeFrom(const GetCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nexus.GetCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commit()) {
    mutable_commit()->::nexus::Commit::MergeFrom(from.commit());
  }
}

void GetCommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nexus.GetCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCommitResponse::CopyFrom(const GetCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.GetCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommitResponse::IsInitialized() const {
  return true;
}

void GetCommitResponse::Swap(GetCommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCommitResponse::InternalSwap(GetCommitResponse* other) {
  using std::swap;
  swap(commit_, other->commit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCommitResponse::GetMetadata() const {
  protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetCommitsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCommitsRequest::kRepoNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCommitsRequest::GetCommitsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nexus.GetCommitsRequest)
}
GetCommitsRequest::GetCommitsRequest(const GetCommitsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reponame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reponame().size() > 0) {
    reponame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reponame_);
  }
  // @@protoc_insertion_point(copy_constructor:nexus.GetCommitsRequest)
}

void GetCommitsRequest::SharedCtor() {
  reponame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetCommitsRequest::~GetCommitsRequest() {
  // @@protoc_insertion_point(destructor:nexus.GetCommitsRequest)
  SharedDtor();
}

void GetCommitsRequest::SharedDtor() {
  reponame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetCommitsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCommitsRequest::descriptor() {
  ::protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCommitsRequest& GetCommitsRequest::default_instance() {
  ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitsRequest();
  return *internal_default_instance();
}

GetCommitsRequest* GetCommitsRequest::New(::google::protobuf::Arena* arena) const {
  GetCommitsRequest* n = new GetCommitsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCommitsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.GetCommitsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reponame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetCommitsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nexus.GetCommitsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string repoName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reponame()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reponame().data(), static_cast<int>(this->reponame().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nexus.GetCommitsRequest.repoName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nexus.GetCommitsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nexus.GetCommitsRequest)
  return false;
#undef DO_
}

void GetCommitsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nexus.GetCommitsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repoName = 1;
  if (this->reponame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reponame().data(), static_cast<int>(this->reponame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.GetCommitsRequest.repoName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reponame(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nexus.GetCommitsRequest)
}

::google::protobuf::uint8* GetCommitsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nexus.GetCommitsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repoName = 1;
  if (this->reponame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reponame().data(), static_cast<int>(this->reponame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nexus.GetCommitsRequest.repoName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reponame(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nexus.GetCommitsRequest)
  return target;
}

size_t GetCommitsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nexus.GetCommitsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string repoName = 1;
  if (this->reponame().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reponame());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommitsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nexus.GetCommitsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCommitsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCommitsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nexus.GetCommitsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nexus.GetCommitsRequest)
    MergeFrom(*source);
  }
}

void GetCommitsRequest::MergeFrom(const GetCommitsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nexus.GetCommitsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reponame().size() > 0) {

    reponame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reponame_);
  }
}

void GetCommitsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nexus.GetCommitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCommitsRequest::CopyFrom(const GetCommitsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.GetCommitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommitsRequest::IsInitialized() const {
  return true;
}

void GetCommitsRequest::Swap(GetCommitsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCommitsRequest::InternalSwap(GetCommitsRequest* other) {
  using std::swap;
  reponame_.Swap(&other->reponame_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCommitsRequest::GetMetadata() const {
  protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetCommitsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCommitsResponse::kCommitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCommitsResponse::GetCommitsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nexus.GetCommitsResponse)
}
GetCommitsResponse::GetCommitsResponse(const GetCommitsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      commits_(from.commits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nexus.GetCommitsResponse)
}

void GetCommitsResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetCommitsResponse::~GetCommitsResponse() {
  // @@protoc_insertion_point(destructor:nexus.GetCommitsResponse)
  SharedDtor();
}

void GetCommitsResponse::SharedDtor() {
}

void GetCommitsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCommitsResponse::descriptor() {
  ::protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCommitsResponse& GetCommitsResponse::default_instance() {
  ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitsResponse();
  return *internal_default_instance();
}

GetCommitsResponse* GetCommitsResponse::New(::google::protobuf::Arena* arena) const {
  GetCommitsResponse* n = new GetCommitsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCommitsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.GetCommitsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCommitsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nexus.GetCommitsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nexus.Commit commits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_commits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nexus.GetCommitsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nexus.GetCommitsResponse)
  return false;
#undef DO_
}

void GetCommitsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nexus.GetCommitsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nexus.Commit commits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commits(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nexus.GetCommitsResponse)
}

::google::protobuf::uint8* GetCommitsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nexus.GetCommitsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nexus.Commit commits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->commits(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nexus.GetCommitsResponse)
  return target;
}

size_t GetCommitsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nexus.GetCommitsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nexus.Commit commits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->commits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->commits(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommitsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nexus.GetCommitsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCommitsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCommitsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nexus.GetCommitsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nexus.GetCommitsResponse)
    MergeFrom(*source);
  }
}

void GetCommitsResponse::MergeFrom(const GetCommitsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nexus.GetCommitsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commits_.MergeFrom(from.commits_);
}

void GetCommitsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nexus.GetCommitsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCommitsResponse::CopyFrom(const GetCommitsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.GetCommitsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommitsResponse::IsInitialized() const {
  return true;
}

void GetCommitsResponse::Swap(GetCommitsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCommitsResponse::InternalSwap(GetCommitsResponse* other) {
  using std::swap;
  commits_.InternalSwap(&other->commits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCommitsResponse::GetMetadata() const {
  protobuf_RepoInfoService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RepoInfoService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nexus

// @@protoc_insertion_point(global_scope)
