// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RepoInfoService.proto

#ifndef PROTOBUF_RepoInfoService_2eproto__INCLUDED
#define PROTOBUF_RepoInfoService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_RepoInfoService_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommitImpl();
void InitDefaultsCommit();
void InitDefaultsGetCommitRequestImpl();
void InitDefaultsGetCommitRequest();
void InitDefaultsGetCommitResponseImpl();
void InitDefaultsGetCommitResponse();
void InitDefaultsGetCommitsRequestImpl();
void InitDefaultsGetCommitsRequest();
void InitDefaultsGetCommitsResponseImpl();
void InitDefaultsGetCommitsResponse();
inline void InitDefaults() {
  InitDefaultsCommit();
  InitDefaultsGetCommitRequest();
  InitDefaultsGetCommitResponse();
  InitDefaultsGetCommitsRequest();
  InitDefaultsGetCommitsResponse();
}
}  // namespace protobuf_RepoInfoService_2eproto
namespace nexus {
class Commit;
class CommitDefaultTypeInternal;
extern CommitDefaultTypeInternal _Commit_default_instance_;
class GetCommitRequest;
class GetCommitRequestDefaultTypeInternal;
extern GetCommitRequestDefaultTypeInternal _GetCommitRequest_default_instance_;
class GetCommitResponse;
class GetCommitResponseDefaultTypeInternal;
extern GetCommitResponseDefaultTypeInternal _GetCommitResponse_default_instance_;
class GetCommitsRequest;
class GetCommitsRequestDefaultTypeInternal;
extern GetCommitsRequestDefaultTypeInternal _GetCommitsRequest_default_instance_;
class GetCommitsResponse;
class GetCommitsResponseDefaultTypeInternal;
extern GetCommitsResponseDefaultTypeInternal _GetCommitsResponse_default_instance_;
}  // namespace nexus
namespace nexus {

// ===================================================================

class Commit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.Commit) */ {
 public:
  Commit();
  virtual ~Commit();

  Commit(const Commit& from);

  inline Commit& operator=(const Commit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Commit(Commit&& from) noexcept
    : Commit() {
    *this = ::std::move(from);
  }

  inline Commit& operator=(Commit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Commit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commit* internal_default_instance() {
    return reinterpret_cast<const Commit*>(
               &_Commit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Commit* other);
  friend void swap(Commit& a, Commit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Commit* New() const PROTOBUF_FINAL { return New(NULL); }

  Commit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Commit& from);
  void MergeFrom(const Commit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Commit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string hash = 3;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .google.protobuf.Timestamp date = 5;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 5;
  const ::google::protobuf::Timestamp& date() const;
  ::google::protobuf::Timestamp* release_date();
  ::google::protobuf::Timestamp* mutable_date();
  void set_allocated_date(::google::protobuf::Timestamp* date);

  // @@protoc_insertion_point(class_scope:nexus.Commit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::Timestamp* date_;
  mutable int _cached_size_;
  friend struct ::protobuf_RepoInfoService_2eproto::TableStruct;
  friend void ::protobuf_RepoInfoService_2eproto::InitDefaultsCommitImpl();
};
// -------------------------------------------------------------------

class GetCommitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.GetCommitRequest) */ {
 public:
  GetCommitRequest();
  virtual ~GetCommitRequest();

  GetCommitRequest(const GetCommitRequest& from);

  inline GetCommitRequest& operator=(const GetCommitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCommitRequest(GetCommitRequest&& from) noexcept
    : GetCommitRequest() {
    *this = ::std::move(from);
  }

  inline GetCommitRequest& operator=(GetCommitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCommitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommitRequest* internal_default_instance() {
    return reinterpret_cast<const GetCommitRequest*>(
               &_GetCommitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetCommitRequest* other);
  friend void swap(GetCommitRequest& a, GetCommitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCommitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCommitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCommitRequest& from);
  void MergeFrom(const GetCommitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCommitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:nexus.GetCommitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend struct ::protobuf_RepoInfoService_2eproto::TableStruct;
  friend void ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitRequestImpl();
};
// -------------------------------------------------------------------

class GetCommitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.GetCommitResponse) */ {
 public:
  GetCommitResponse();
  virtual ~GetCommitResponse();

  GetCommitResponse(const GetCommitResponse& from);

  inline GetCommitResponse& operator=(const GetCommitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCommitResponse(GetCommitResponse&& from) noexcept
    : GetCommitResponse() {
    *this = ::std::move(from);
  }

  inline GetCommitResponse& operator=(GetCommitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCommitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommitResponse* internal_default_instance() {
    return reinterpret_cast<const GetCommitResponse*>(
               &_GetCommitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetCommitResponse* other);
  friend void swap(GetCommitResponse& a, GetCommitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCommitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCommitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCommitResponse& from);
  void MergeFrom(const GetCommitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCommitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nexus.Commit commit = 1;
  bool has_commit() const;
  void clear_commit();
  static const int kCommitFieldNumber = 1;
  const ::nexus::Commit& commit() const;
  ::nexus::Commit* release_commit();
  ::nexus::Commit* mutable_commit();
  void set_allocated_commit(::nexus::Commit* commit);

  // @@protoc_insertion_point(class_scope:nexus.GetCommitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nexus::Commit* commit_;
  mutable int _cached_size_;
  friend struct ::protobuf_RepoInfoService_2eproto::TableStruct;
  friend void ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitResponseImpl();
};
// -------------------------------------------------------------------

class GetCommitsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.GetCommitsRequest) */ {
 public:
  GetCommitsRequest();
  virtual ~GetCommitsRequest();

  GetCommitsRequest(const GetCommitsRequest& from);

  inline GetCommitsRequest& operator=(const GetCommitsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCommitsRequest(GetCommitsRequest&& from) noexcept
    : GetCommitsRequest() {
    *this = ::std::move(from);
  }

  inline GetCommitsRequest& operator=(GetCommitsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCommitsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommitsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCommitsRequest*>(
               &_GetCommitsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetCommitsRequest* other);
  friend void swap(GetCommitsRequest& a, GetCommitsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCommitsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCommitsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCommitsRequest& from);
  void MergeFrom(const GetCommitsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCommitsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repoName = 1;
  void clear_reponame();
  static const int kRepoNameFieldNumber = 1;
  const ::std::string& reponame() const;
  void set_reponame(const ::std::string& value);
  #if LANG_CXX11
  void set_reponame(::std::string&& value);
  #endif
  void set_reponame(const char* value);
  void set_reponame(const char* value, size_t size);
  ::std::string* mutable_reponame();
  ::std::string* release_reponame();
  void set_allocated_reponame(::std::string* reponame);

  // @@protoc_insertion_point(class_scope:nexus.GetCommitsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reponame_;
  mutable int _cached_size_;
  friend struct ::protobuf_RepoInfoService_2eproto::TableStruct;
  friend void ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitsRequestImpl();
};
// -------------------------------------------------------------------

class GetCommitsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nexus.GetCommitsResponse) */ {
 public:
  GetCommitsResponse();
  virtual ~GetCommitsResponse();

  GetCommitsResponse(const GetCommitsResponse& from);

  inline GetCommitsResponse& operator=(const GetCommitsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCommitsResponse(GetCommitsResponse&& from) noexcept
    : GetCommitsResponse() {
    *this = ::std::move(from);
  }

  inline GetCommitsResponse& operator=(GetCommitsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCommitsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCommitsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCommitsResponse*>(
               &_GetCommitsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetCommitsResponse* other);
  friend void swap(GetCommitsResponse& a, GetCommitsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCommitsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCommitsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCommitsResponse& from);
  void MergeFrom(const GetCommitsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCommitsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nexus.Commit commits = 1;
  int commits_size() const;
  void clear_commits();
  static const int kCommitsFieldNumber = 1;
  const ::nexus::Commit& commits(int index) const;
  ::nexus::Commit* mutable_commits(int index);
  ::nexus::Commit* add_commits();
  ::google::protobuf::RepeatedPtrField< ::nexus::Commit >*
      mutable_commits();
  const ::google::protobuf::RepeatedPtrField< ::nexus::Commit >&
      commits() const;

  // @@protoc_insertion_point(class_scope:nexus.GetCommitsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nexus::Commit > commits_;
  mutable int _cached_size_;
  friend struct ::protobuf_RepoInfoService_2eproto::TableStruct;
  friend void ::protobuf_RepoInfoService_2eproto::InitDefaultsGetCommitsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Commit

// string author = 1;
inline void Commit::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Commit::author() const {
  // @@protoc_insertion_point(field_get:nexus.Commit.author)
  return author_.GetNoArena();
}
inline void Commit::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.Commit.author)
}
#if LANG_CXX11
inline void Commit::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.Commit.author)
}
#endif
inline void Commit::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.Commit.author)
}
inline void Commit::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.Commit.author)
}
inline ::std::string* Commit::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:nexus.Commit.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Commit::release_author() {
  // @@protoc_insertion_point(field_release:nexus.Commit.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Commit::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:nexus.Commit.author)
}

// string message = 2;
inline void Commit::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Commit::message() const {
  // @@protoc_insertion_point(field_get:nexus.Commit.message)
  return message_.GetNoArena();
}
inline void Commit::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.Commit.message)
}
#if LANG_CXX11
inline void Commit::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.Commit.message)
}
#endif
inline void Commit::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.Commit.message)
}
inline void Commit::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.Commit.message)
}
inline ::std::string* Commit::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:nexus.Commit.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Commit::release_message() {
  // @@protoc_insertion_point(field_release:nexus.Commit.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Commit::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:nexus.Commit.message)
}

// string hash = 3;
inline void Commit::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Commit::hash() const {
  // @@protoc_insertion_point(field_get:nexus.Commit.hash)
  return hash_.GetNoArena();
}
inline void Commit::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.Commit.hash)
}
#if LANG_CXX11
inline void Commit::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.Commit.hash)
}
#endif
inline void Commit::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.Commit.hash)
}
inline void Commit::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.Commit.hash)
}
inline ::std::string* Commit::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:nexus.Commit.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Commit::release_hash() {
  // @@protoc_insertion_point(field_release:nexus.Commit.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Commit::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:nexus.Commit.hash)
}

// bytes body = 4;
inline void Commit::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Commit::body() const {
  // @@protoc_insertion_point(field_get:nexus.Commit.body)
  return body_.GetNoArena();
}
inline void Commit::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.Commit.body)
}
#if LANG_CXX11
inline void Commit::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.Commit.body)
}
#endif
inline void Commit::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.Commit.body)
}
inline void Commit::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.Commit.body)
}
inline ::std::string* Commit::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:nexus.Commit.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Commit::release_body() {
  // @@protoc_insertion_point(field_release:nexus.Commit.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Commit::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:nexus.Commit.body)
}

// .google.protobuf.Timestamp date = 5;
inline bool Commit::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline const ::google::protobuf::Timestamp& Commit::date() const {
  const ::google::protobuf::Timestamp* p = date_;
  // @@protoc_insertion_point(field_get:nexus.Commit.date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Commit::release_date() {
  // @@protoc_insertion_point(field_release:nexus.Commit.date)
  
  ::google::protobuf::Timestamp* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Commit::mutable_date() {
  
  if (date_ == NULL) {
    date_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:nexus.Commit.date)
  return date_;
}
inline void Commit::set_allocated_date(::google::protobuf::Timestamp* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:nexus.Commit.date)
}

// -------------------------------------------------------------------

// GetCommitRequest

// string hash = 1;
inline void GetCommitRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCommitRequest::hash() const {
  // @@protoc_insertion_point(field_get:nexus.GetCommitRequest.hash)
  return hash_.GetNoArena();
}
inline void GetCommitRequest::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.GetCommitRequest.hash)
}
#if LANG_CXX11
inline void GetCommitRequest::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.GetCommitRequest.hash)
}
#endif
inline void GetCommitRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.GetCommitRequest.hash)
}
inline void GetCommitRequest::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.GetCommitRequest.hash)
}
inline ::std::string* GetCommitRequest::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:nexus.GetCommitRequest.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCommitRequest::release_hash() {
  // @@protoc_insertion_point(field_release:nexus.GetCommitRequest.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCommitRequest::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:nexus.GetCommitRequest.hash)
}

// -------------------------------------------------------------------

// GetCommitResponse

// .nexus.Commit commit = 1;
inline bool GetCommitResponse::has_commit() const {
  return this != internal_default_instance() && commit_ != NULL;
}
inline void GetCommitResponse::clear_commit() {
  if (GetArenaNoVirtual() == NULL && commit_ != NULL) {
    delete commit_;
  }
  commit_ = NULL;
}
inline const ::nexus::Commit& GetCommitResponse::commit() const {
  const ::nexus::Commit* p = commit_;
  // @@protoc_insertion_point(field_get:nexus.GetCommitResponse.commit)
  return p != NULL ? *p : *reinterpret_cast<const ::nexus::Commit*>(
      &::nexus::_Commit_default_instance_);
}
inline ::nexus::Commit* GetCommitResponse::release_commit() {
  // @@protoc_insertion_point(field_release:nexus.GetCommitResponse.commit)
  
  ::nexus::Commit* temp = commit_;
  commit_ = NULL;
  return temp;
}
inline ::nexus::Commit* GetCommitResponse::mutable_commit() {
  
  if (commit_ == NULL) {
    commit_ = new ::nexus::Commit;
  }
  // @@protoc_insertion_point(field_mutable:nexus.GetCommitResponse.commit)
  return commit_;
}
inline void GetCommitResponse::set_allocated_commit(::nexus::Commit* commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commit_;
  }
  if (commit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    
  } else {
    
  }
  commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:nexus.GetCommitResponse.commit)
}

// -------------------------------------------------------------------

// GetCommitsRequest

// string repoName = 1;
inline void GetCommitsRequest::clear_reponame() {
  reponame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCommitsRequest::reponame() const {
  // @@protoc_insertion_point(field_get:nexus.GetCommitsRequest.repoName)
  return reponame_.GetNoArena();
}
inline void GetCommitsRequest::set_reponame(const ::std::string& value) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nexus.GetCommitsRequest.repoName)
}
#if LANG_CXX11
inline void GetCommitsRequest::set_reponame(::std::string&& value) {
  
  reponame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nexus.GetCommitsRequest.repoName)
}
#endif
inline void GetCommitsRequest::set_reponame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nexus.GetCommitsRequest.repoName)
}
inline void GetCommitsRequest::set_reponame(const char* value, size_t size) {
  
  reponame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nexus.GetCommitsRequest.repoName)
}
inline ::std::string* GetCommitsRequest::mutable_reponame() {
  
  // @@protoc_insertion_point(field_mutable:nexus.GetCommitsRequest.repoName)
  return reponame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCommitsRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:nexus.GetCommitsRequest.repoName)
  
  return reponame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCommitsRequest::set_allocated_reponame(::std::string* reponame) {
  if (reponame != NULL) {
    
  } else {
    
  }
  reponame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reponame);
  // @@protoc_insertion_point(field_set_allocated:nexus.GetCommitsRequest.repoName)
}

// -------------------------------------------------------------------

// GetCommitsResponse

// repeated .nexus.Commit commits = 1;
inline int GetCommitsResponse::commits_size() const {
  return commits_.size();
}
inline void GetCommitsResponse::clear_commits() {
  commits_.Clear();
}
inline const ::nexus::Commit& GetCommitsResponse::commits(int index) const {
  // @@protoc_insertion_point(field_get:nexus.GetCommitsResponse.commits)
  return commits_.Get(index);
}
inline ::nexus::Commit* GetCommitsResponse::mutable_commits(int index) {
  // @@protoc_insertion_point(field_mutable:nexus.GetCommitsResponse.commits)
  return commits_.Mutable(index);
}
inline ::nexus::Commit* GetCommitsResponse::add_commits() {
  // @@protoc_insertion_point(field_add:nexus.GetCommitsResponse.commits)
  return commits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nexus::Commit >*
GetCommitsResponse::mutable_commits() {
  // @@protoc_insertion_point(field_mutable_list:nexus.GetCommitsResponse.commits)
  return &commits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nexus::Commit >&
GetCommitsResponse::commits() const {
  // @@protoc_insertion_point(field_list:nexus.GetCommitsResponse.commits)
  return commits_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nexus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RepoInfoService_2eproto__INCLUDED
